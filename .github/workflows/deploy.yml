name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: deploy-azure-vm
  cancel-in-progress: true

jobs:
  deploy:
    environment: azure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SSH_KEY_PATH: /home/runner/.ssh/notes_ci_deploy

    steps:
      - name: Precheck env secrets
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ secrets.VM_HOST }}" ] || (echo "❌ VM_HOST missing"; exit 1)
          [ -n "${{ secrets.VM_USER }}" ] || (echo "❌ VM_USER missing"; exit 1)
          [ -n "${{ secrets.VM_SSH_KEY_B64 }}" ] || (echo "❌ VM_SSH_KEY_B64 missing"; exit 1)
          echo "✅ Secrets present."

      - name: Write SSH private key from base64 and validate
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$SSH_KEY_PATH")"
          umask 077
          echo "${{ secrets.VM_SSH_KEY_B64 }}" | base64 -d > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"
          ssh-keygen -y -f "$SSH_KEY_PATH" >/dev/null 2>&1 || { echo "❌ Invalid private key"; exit 1; }
          echo "✅ Private key decoded & valid."

      - name: Show CI key fingerprint (safe)
        shell: bash
        run: ssh-keygen -l -f "$SSH_KEY_PATH"

      - name: Add host key to known_hosts (optional)
        shell: bash
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> /home/runner/.ssh/known_hosts 2>/dev/null || true

      - name: SSH to VM and deploy (drone-safe)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -o pipefail
            set -x

            # Ensure git
            if ! command -v git >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y git; fi

            # Start docker if present (ignore if not systemd)
            sudo systemctl start docker 2>/dev/null || true

            # Choose compose command (single-line if/else so wrapper won't bail)
            if sudo docker compose version >/dev/null 2>&1; then COMPOSE_CMD="sudo docker compose"; echo "Using: docker compose"; else if command -v docker-compose >/dev/null 2>&1; then COMPOSE_CMD="sudo docker-compose"; echo "Using: docker-compose (legacy)"; else echo "❌ No compose found"; exit 1; fi; fi

            # 1) App folder
            sudo mkdir -p /opt/notes-app
            U="$(id -un)"; G="$(id -gn)"
            sudo chown "$U:$G" /opt/notes-app
            cd /opt/notes-app

            # 2) Repo (single-line conditional; no mid-line non-zero)
            if [ -d .git ]; then git fetch origin main --prune && git reset --hard origin/main; else git clone --depth=1 https://github.com/Waf-DPM-dev/azure-docker-assignment.git .; fi

            # 3) Find compose file (root or backend/)
            if [ -f docker-compose.yml ]; then COMPOSE_DIR="."; elif [ -f backend/docker-compose.yml ]; then COMPOSE_DIR="backend"; else echo "❌ docker-compose.yml not found"; exit 1; fi
            cd "$COMPOSE_DIR"

            # Remember project name to compute container names (e.g., backend-db-1)
            PROJECT_NAME="$(basename "$PWD")"
            DB_CONT="${PROJECT_NAME}-db-1"

            # 4a) Frontend override: point API to the VM (quote value)
            cat > docker-compose.vm.yml <<'YAML'
            services:
              frontend:
                build:
                  args:
                    REACT_APP_API_URL: "http://4.219.11.94:3001"
            YAML
            sed -i "s#__API_URL__#http://${{ secrets.VM_HOST }}:3001#g" docker-compose.vm.yml

            # 4b) Reliability override: restart policies + simple db healthcheck + backend waits for db
            cat > docker-compose.reliability.yml <<'YAML'
            services:
              db:
                restart: unless-stopped
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 20
              backend:
                restart: unless-stopped
                depends_on:
                  db:
                    condition: service_healthy
              frontend:
                restart: unless-stopped
            YAML

            # 5) Show merged config (don't fail the whole step if this errors)
            $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml -f docker-compose.reliability.yml config || true

            # 6) Remove old stopped db container so restart policy applies cleanly
            sudo docker rm -f "$DB_CONT" >/dev/null 2>&1 || true

            # 7) Build & up (force recreate) — never let a single line non-zero kill the session
            DOCKER_BUILDKIT=1 $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml -f docker-compose.reliability.yml build --progress=plain || true
            $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml -f docker-compose.reliability.yml up -d --remove-orphans --force-recreate || true

            # 8) Ensure db is up (if not, try to start explicitly)
            if sudo docker ps --format '{{.Names}}' | grep -q "^${DB_CONT}$"; then echo "db running."; else echo "db not running; attempting to start"; $COMPOSE_CMD up -d db || $COMPOSE_CMD start db || true; fi

            # 9) Status & quick logs (non-fatal)
            $COMPOSE_CMD ps || true
            $COMPOSE_CMD logs --no-color --tail=120 || true
            sudo docker ps -a || true
            sudo docker system df || true

            # 10) App health (non-fatal)
            curl -fsS http://localhost:3001/health || true

            echo "✅ Deployment complete."
