name: Deploy to Azure VM

on:
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: deploy-azure-vm
  cancel-in-progress: true

jobs:
  deploy:
    environment: azure
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      SSH_KEY_PATH: /home/runner/.ssh/notes_ci_deploy   # <— absolute path on GH runner

    steps:
      - name: Precheck environment secrets
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ secrets.VM_HOST }}" ] || (echo "❌ VM_HOST missing"; exit 1)
          [ -n "${{ secrets.VM_USER }}" ] || (echo "❌ VM_USER missing"; exit 1)
          [ -n "${{ secrets.VM_SSH_KEY }}" ] || (echo "❌ VM_SSH_KEY missing"; exit 1)
          echo "✅ Secrets present."

      - name: Write SSH private key (notes_ci_deploy)
        shell: bash
        run: |
          mkdir -p "$(dirname "$SSH_KEY_PATH")"
          umask 077
          # Write the *private* key exactly as stored (multi-line OK)
          printf '%s' "${{ secrets.VM_SSH_KEY }}" > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"

      - name: SSH to VM and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}            # <— use the absolute path
          # passphrase: ${{ secrets.VM_SSH_PASSPHRASE }}  # uncomment if your key has one
          script_stop: true
          port: 22
          script: |
            set -Eeuo pipefail

            # Ensure tools (no-op if present)
            if ! command -v git >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y git
            fi
            if ! docker compose version >/dev/null 2>&1; then
              echo "❌ Docker Compose plugin not found on VM"; exit 1
            fi

            # 1) app folder
            sudo mkdir -p /opt/notes-app
            U="$(id -un)"; G="$(id -gn)"
            sudo chown "$U:$G" /opt/notes-app
            cd /opt/notes-app

            # 2) pull/refresh repo
            if [ ! -d .git ]; then
              git clone --depth=1 https://github.com/Waf-DPM-dev/azure-docker-assignment.git .
            else
              git fetch origin main --prune
              git reset --hard origin/main
            fi

            # 3) locate compose file (root or backend/)
            COMPOSE_DIR="."
            [ -f docker-compose.yml ] || { [ -f backend/docker-compose.yml ] && COMPOSE_DIR="backend"; }
            [ -f "$COMPOSE_DIR/docker-compose.yml" ] || { echo "❌ docker-compose.yml not found"; exit 1; }
            cd "$COMPOSE_DIR"

            # 3a) override for frontend build API URL
            cat > docker-compose.vm.yml <<'EOF'
            services:
              frontend:
                build:
                  args:
                    REACT_APP_API_URL: __API_URL__
            EOF
            sed -i "s#__API_URL__#http://${{ secrets.VM_HOST }}:3001#g" docker-compose.vm.yml

            # 3b) build & run
            docker compose -f docker-compose.yml -f docker-compose.vm.yml up -d --build

            # 4) quick health
            docker compose ps
            curl -fsS http://localhost:3001/health || true

            echo "✅ Deployment complete."
