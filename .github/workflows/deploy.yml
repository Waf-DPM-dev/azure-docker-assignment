name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: deploy-azure-vm
  cancel-in-progress: true

jobs:
  deploy:
    environment: azure
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      SSH_KEY_PATH: /home/runner/.ssh/notes_ci_deploy

    steps:
      - name: Precheck env secrets
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ secrets.VM_HOST }}" ] || (echo "❌ VM_HOST missing"; exit 1)
          [ -n "${{ secrets.VM_USER }}" ] || (echo "❌ VM_USER missing"; exit 1)
          [ -n "${{ secrets.VM_SSH_KEY_B64 }}" ] || (echo "❌ VM_SSH_KEY_B64 missing"; exit 1)
          echo "✅ Secrets present."

      - name: Write SSH private key from base64 and validate
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$SSH_KEY_PATH")"
          umask 077
          echo "${{ secrets.VM_SSH_KEY_B64 }}" | base64 -d > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"

          # Validate private key (no passphrase expected)
          if ! ssh-keygen -y -f "$SSH_KEY_PATH" >/dev/null 2>&1; then
            echo "❌ Decoded key is not a valid OpenSSH private key (or needs a passphrase)."
            echo "   Recreate the key without a passphrase and re-create VM_SSH_KEY_B64 from the file."
            exit 1
          fi
          echo "✅ Private key decoded & valid."

      - name: Show CI key fingerprint (safe)
        shell: bash
        run: ssh-keygen -l -f "$SSH_KEY_PATH"

      - name: Add host key to known_hosts (optional)
        shell: bash
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> /home/runner/.ssh/known_hosts 2>/dev/null || true

      - name: Probe Docker / Compose (non-fatal)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            echo "== whoami / uname =="
            whoami || true
            uname -a || true

            echo "== docker client =="
            command -v docker && docker --version || echo "docker client: not found"

            echo "== compose detection =="
            (docker compose version && echo "compose plugin OK") || true
            (docker-compose --version && echo "legacy docker-compose OK") || true

            echo "== daemon status =="
            (sudo systemctl is-active docker && echo "docker active") || (echo "docker not active"; true)

      - name: SSH to VM and deploy (debug)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key_path: ${{ env.SSH_KEY_PATH }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -Eeuo pipefail
            set -x

            # Ensure git
            if ! command -v git >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y git
            fi

            # Start docker if installed but inactive (ignore if systemd absent)
            sudo systemctl start docker 2>/dev/null || true

            # Choose compose command (plugin or legacy), always with sudo
            if sudo docker compose version >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker compose"
              echo "Using: docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="sudo docker-compose"
              echo "Using: docker-compose (legacy)"
            else
              echo "❌ Neither 'docker compose' nor 'docker-compose' is available."; exit 1
            fi

            # On error: dump diagnostics & logs
            trap 'echo "---- DIAGNOSTICS (on error) ----";
                  $COMPOSE_CMD ps || true;
                  $COMPOSE_CMD logs --no-color --tail=200 || true;
                  sudo docker ps -a || true;
                  sudo docker system df || true;
                  command -v lsof >/dev/null 2>&1 && sudo lsof -nP -i :3001 || true;
                  echo "---- END DIAGNOSTICS ----"' ERR

            # 1) App folder & ownership
            sudo mkdir -p /opt/notes-app
            U="$(id -un)"; G="$(id -gn)"
            sudo chown "$U:$G" /opt/notes-app
            cd /opt/notes-app

            # 2) Repo (clone/refresh)
            if [ ! -d .git ]; then
              git clone --depth=1 https://github.com/Waf-DPM-dev/azure-docker-assignment.git .
            else
              git fetch origin main --prune
              git reset --hard origin/main
            fi

            # 3) Find compose file (root or backend/)
            COMPOSE_DIR="."
            [ -f docker-compose.yml ] || { [ -f backend/docker-compose.yml ] && COMPOSE_DIR="backend"; }
            [ -f "$COMPOSE_DIR/docker-compose.yml" ] || { echo "❌ docker-compose.yml not found"; exit 1; }
            cd "$COMPOSE_DIR"

            # 4) Override: Frontend API URL points to VM
            API_URL="http://${{ secrets.VM_HOST }}:3001"
            cat > docker-compose.vm.yml <<EOF
            services:
              frontend:
                build:
                  args:
                    REACT_APP_API_URL: ${API_URL}
            EOF

            # 5) Validate merged config (shows errors early)
            $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml config

            # 6) Build (plain logs) and Up
            DOCKER_BUILDKIT=1 $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml build --progress=plain
            $COMPOSE_CMD -f docker-compose.yml -f docker-compose.vm.yml up -d

            # 7) Status & health
            $COMPOSE_CMD ps
            curl -fsS http://localhost:3001/health || true

            echo "✅ Deployment complete."
